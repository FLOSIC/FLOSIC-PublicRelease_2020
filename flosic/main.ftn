! UTEP Electronic Structure Lab (2020)
!
%ifdef MPI
      SUBROUTINE CLUSTER2()
!
%else
      PROGRAM CLUSTER
!
%endif
!     ------------------------------------------------------------------
!
      use debug1
      use global_inputs,only : EXCITED1,DOSJNT1,WFGRID1,RHOGRID1,
     & DOSOCCU1,MATDIPOLE1,NONSCF1,FRAGMENT1,SOLVENT1,DFTD31,CALCTYPE1,
     & MAXSCF,SCFTOL,MOLDEN1,NBO1,ATOMSPH1,SPNORB1,PCM1,WFFRM1,
     & DMAT1,MIXING1,ITTOT,NONSCFFORCES1,NWFOUT,EFP1,POPULATION1,
     & FOD_LOOP1,FOD_OPT2,UNIHAM1,FROZENDENSITY1
      use mesh1,only : nmsh

      use common2,only : CHNET, RIDT, IFUIDT, NIDENT, ZELC, ZNUC,
     & ISPN, NSPN, NBO, DIPOLE, EFIELD, ETOTAL, ENNUC, ELOCAL, ECOUL,
     & ERGFLD, EKINONL, ENONLO, ERGXL, ERGXN, ERGCL, ERGCN, GTOL,
     & MOLDEN, OPTIMIZED, EDISP, PRTMOS, PRTPMAT, PRTSMAT, ESOLTOT,
     & ESOLC,ENUCSOL,EPCM, NCNT
     & ,IFUCNT,RCNT,N_POS !Needed for SIC

      use common3,only : RMAT,NGRP
      use common5,only : CONVERGENCE, HAVEHAM, ISTSCF, IHIPOL,
     &  PSI_COEF, OCCUPANCY, N_OCC, PSI, NWF, EVLOCC
      use common7,only : T1UNRV, T2UNRV
      use common8,only : REP, N_REP, IGEN, NS_TOT
      ! LA features of the new_mode are here
      use common9, only: old_mode
      use inputvars, only: functype, symgrp, geometry, atoms, 
     & atoms_int, spinpseudo, read_file

!SIC module
      use SICFLAG,only : MESH_SAV,LSICF
      use LOCORB,only : TMAT,MORB,ZSIC,IRBSIC
      use MOCORB,only : SLAT,NFRM,ZTZL,JJJJJJ
      use FRM,only    : BFRM,RESULTS,LFRM,DEBDAX
      use SICMAT,only : SIC!,ZPOT,ZMGGA
      use HMATSIC,only : OVTM,HMTM
      use FOCENT,only : CFRM
      use coupotmod,only : USE_DDOT
! Conversion to implicit none.  Raja Zope Sun Oct 23 22:09:36 MDT 2016
       INCLUDE  'PARAMA2'  
       INTEGER :: MXCHG,  I, I_OCC, I_REP, IA, IATOM, IERR, 
     & IMESH, INITOUT, IORB, IORBX, ISTDEF, ITBEG, ITOT,
     & ITSCF, IWF, JWF, IX, J, JSPNX, K, MODE_RUN, MSITES, MXNUC,
     & NCALC, NN_ATOMS, NSPX, ITER_FOD !,NCNT
     
       real(dp) :: ATMASS, DFONUC, ELOWEST, ERGCNV, FOMSH_CUT,
     & FOMSH_ISCORE, FOMSH_MDIST, OLDERG1, OLDERG2, PMASS,
     & POSITION, RLOCA, THTIME, TIME1, TIME2,
     & TIME_MAINSIC, TIMEA, TIMEB, TIMET1, TIMET2, TIMET3, TIMET4,
     & TOLSML, TOTQNUM, TRACE, TTIME, THTIME2,TIMEX,TIMEY

      SAVE

      PARAMETER(MXCHG=56)
      LOGICAL FULLSTEP,LNEWWF,DOITALL
      LOGICAL EXIST,FAILED,EXCCONV,LSIC,FODMSH_EXISTS
      LOGICAL FOD_LOOP
      LOGICAL FOD_CONVERGE
      CHARACTER(5) OPTION
      CHARACTER(1) CHDUM
      CHARACTER(40) NAME
      DIMENSION MSITES(1), RLOCA(3,MX_GRP)
      DIMENSION ATMASS(MXCHG),PMASS(MAX_IDENT)
      DIMENSION POSITION(3)
      INTEGER   LSPN, IFRM, IRES(9)
!      integer :: num_occ

      !LA: new code arguments
      character(64) :: arg

      ! These vars are needed for the SIC O(N) mesh code
!     DIMENSION    FOMSH_INFO(MXSPN,MAX_OCC)
      real(dp), allocatable :: FOMSH_INFO(:,:)
      LOGICAL      FOMSH_ENABLE

      real(dp) RDUMMY,RVEC(1)
!
!     --- THE EXTERNAL STATEMENT IS NEEDED FOR THE LBFGS CODE ---
!
      EXTERNAL LB2
      DATA TOLSML/1.0D-4/
      DATA ATMASS/1.00797, 4.0026, 6.939, 9.0122, 10.811, 12.01115
     &            , 14.0067, 15.9994, 18.9984, 20.179, 22.9898, 24.305
     &            , 26.9815, 28.086, 30.9738, 32.064, 35.453, 39.948
     &            , 39.102, 40.08, 44.956, 47.90, 50.942, 51.996
     &            , 54.9381, 55.847, 58.9332, 58.71, 63.546, 65.37
     &            , 69.72, 72.59, 74.9216, 78.96, 79.904, 83.80, 85.47
     &            , 87.62, 88.905, 91.22, 92.906, 95.94, 98.906, 101.07
     &            , 102.905, 106.4, 107.868, 112.40, 114.82, 118.69
     &            , 121.75, 127.60, 126.9044, 131.30, 132.905, 137.34/

      !LA new code 
      call get_command_argument(1,arg)
      old_mode = .false.
      ! if no regular input is given then program runs in old mode
      if (len_trim(arg) == 0) then
        write(*,*) 'No input specified. Running in old mode.'
        old_mode = .true.
      endif

      !<LA: moved here
      CALL INIT_INPUTS
      if (.not. old_mode) call read_file(arg)


!LB: SAVE REDUCED MESH IN SIC MATRIX CALCULATION
      MESH_SAV=.FALSE.
      TIME_MAINSIC=0.0D0
      ELOWEST=0.0d0
      call symfrm(1)

      INQUIRE(FILE='FRMORB',EXIST=EXIST)
      LSIC=.FALSE.
      UNIHAM1=.FALSE.
      IF(EXIST)THEN
        LSIC=.TRUE.
! LB: READ FRMORB HERE
         OPEN(68,FILE='FRMORB')
         READ(68,*)LFRM
!         num_occ = maxval(lfrm)
!         allocate(bfrm(3,num_occ,mxspn))
         DO LSPN=1,2
           DO IFRM=1,LFRM(LSPN)
             READ(68,*)(BFRM(J,IFRM,LSPN),J=1,3)
           END DO
         END DO
         CLOSE(68)
         call allocate_diag1(.true.)
      ENDIF


!  FOD_LOOP = false --> do SCF iteration
!  Initialize FOD_CONVERGE
!
      FOD_LOOP = .FALSE.
      FOD_CONVERGE = .FALSE.
      ITER_FOD = 0

      if (LSIC) then
        inquire(file='GEOCNVRG',EXIST=EXIST)
        IF(EXIST) call system('rm GEOCNVRG')
      endif
      !if (old_mode) then
      inquire(file='AVRGDAT',EXIST=EXIST)
      if(.not.exist)then
        open(90,file='AVRGDAT')
        if(LSIC)write(90,*)' 0.15 T'
        if(.NOT.LSIC)write(90,*)' 0.15 T'
        close(90)
      end if
      
      LSICF=LSIC
      if(LSIC) call delete_oldfiles
      !<LA: SPNORB is never read by any used file, commented out two lines 
      !<LA: perhaps this is for a future update?
!      INQUIRE(FILE='SPNORB',EXIST=EXIST)
!      IF(.NOT.EXIST) call system ('echo "F F" > SPNORB')
      !<LA: Not sure what this is for 
      INITOUT=200

!     ------------------------------------------------------------------
!     --- INITIALIZATION ---
!
      DEBUG = .FALSE.

      !<LA: moved call to earlier
!      CALL INIT_INPUTS
!
!     --- INITIALIZE KEYWORD FIELDS AND SET DEFAULT VALUES ---
!
      CALL DEFAULTKEY
      CALL BANNER
      CALL COPYRIGHT
      CALL PVERSION
      CALL GITVERSION
      CALL GTTIME(TIME1)
      write(*,'(A)') 'GLOBAL AWAKENING ON:' 
      CALL SYSTEM('date')
      WRITE(*,'(A)')'CPU NODE:'
      CALL SYSTEM('hostname')
      CALL SYSTEM('uname -a')
      write(*,'(A)') ' '
      !<LA: This only prints parameters used
      CALL WPARAMS
!
!     --- READ RUNS IF AVAILABLE, PROCESS IT, AND WRITE IT ---
!     --- ITBEG .EQ. 0 -> BEGINNING OF NEW CALCULATION ---
!     --- ITBEG .NE. 0 -> IN MIDDLE OF SCF CALCULATION ---
!     --- NCALC:  CALCULATION INDEX ---
!     --- ISTSCF: START WITH:  ---
!                      0: LEAST-SQUARE FIT OF ATOM POTENTIALS
!                         WITHOUT FURTHER APPROXIMATIONS
!                      1: OLD HAMILTONIAN
!                      2: OLD POTENTIAL
!                      3: LEAST-SQUARE FIT OF ATOM POTENTIALS
!                         NEGLECTING THREE-CENTER INTEGRALS
!                      4: OLD WAVEFUNCTIONS
!                      5: OLD WAVEFUNCTIONS IN FRAGMENTS
!                 11: SPIN POLARIZED FROM SPIN UNPOLARIZED CALCULATION
!                         (MUST CHANGE SIGN OF ELECTRONS IN SYMBOL FILE)
!                         (START WITH WFOUT, AND PSPINP IF USING BHS)
!                     12: CALCULATE IP
!                 (MUST CHANGE ELECTRON NUMBERS AND SIGN IN SYMBOL FILE)
!                         (START WITH WFOUT, AND PSPINP IF USING BHS)
!                     13: CALCULATE EA
!                 (MUST CHANGE ELECTRON NUMBERS AND SIGN IN SYMBOL FILE)
!                         (START WITH WFOUT, AND PSPINP IF USING BHS)
!
!     --- IHIPOL: ---
!                      0: START HAMILTONIAN IS NOT INTERPOLATED
!                      1: START HAMILTONIAN IS INTERPOLATED
!
    !<LA: need new work around for the new mode here
      INQUIRE(FILE='RUNS',EXIST=EXIST)
      IF (EXIST) THEN
        OPEN(65,FILE='RUNS',FORM='FORMATTED',STATUS='UNKNOWN')
        REWIND(65)
        READ(65,*,END=10) ITBEG,NCALC
        READ(65,*,END=10) ISTSCF,ISTDEF
        READ(65,*,END=10) IHIPOL
        GOTO 20

   10   WRITE(6,*)'MAIN: FILE RUNS IS BROKEN'
        CALL STOPIT
   20   CLOSE(65)
!
!     --- RUNS FILE DOES NOT EXIST -> USE DEFAULT OPTIONS ---
!
      ELSE
        ITBEG= 0
        NCALC= 1
        ISTSCF= 3
        ISTDEF= 4
        IHIPOL= 0
      END IF
!
!     --- WRITE NEW RUNS FILE ---
!
      OPEN(65,FILE='RUNS',FORM='FORMATTED',STATUS='UNKNOWN')
      REWIND(65)
      WRITE(65,'(2(1X,I5),12X,A)') ITBEG,NCALC,'ITBEG, NCALC'
      WRITE(65,'(2(1X,I5),12X,A)') ISTSCF, ISTDEF,
     & 'START: 0=SCR.NUC, 1=HAM, 2=POT, 3=LSF, 4=WFUNC, 5=WFUNC_FRAG'
      WRITE(65,'(1X,I5,18X,A)') IHIPOL,
     &   'START HAMILTONIAN IS INTERPOLATED: 0=NO, 1=YES'
      CLOSE(65)

      !<LA: SCISSOR is not written by any other routine 
      !<LA: commenting this out for now 
!      IF(NCALC.EQ.1)THEN
!        INQUIRE(FILE='SCISSOR',EXIST=EXIST)
!        IF(EXIST)THEN
!          OPEN(66,FILE='PURGRSQ')
!          WRITE(66,*)'T  ... INITIATING PURGRSQ FOR SCISSOR'
!        END IF
!        CLOSE(66)
!      END IF
!      CLOSE(65)

!     --- IF CONJUGATE-GRADIENT OR VERLET, CHECK FOR CONVERGENCE  ---
!     --- OF FORCES IF THE LARGEST FORCE ACTING ON AN ATOM IN THE ---
!     --- CLUSTER IS SMALLER THAN GTOL, THE GEOMETRY IS CONVERGED ---
!
      OPTION = 'CHECK'
      CALL CHKMIN(MODE_RUN,NCALC,RDUMMY,RDUMMY,RVEC,RVEC,OPTION)
      IF (OPTIMIZED) GO TO 900
!
!     --- CHECK IF "CLUSTER.INP" FILE EXIST AND ---
!     --- GENERATE CORRESPONDING CLUSTER FILE   ---
!
!     YY. 8.4.2020 Commented out the next two lines for PR_2020.
!     INQUIRE(FILE='CLUSTER.INP',EXIST=EXIST)
!     IF (EXIST) CALL GEOINI
!
!     --- CHECK IF NRLMOL_INPUT.DAT FILE EXIST, ---
!     --- IF NOT, CREATE DEFAULT                ---
!
    !<LA: check_inputs is called so many times cause some want
    !<LA: to be able to change variables during an active calculation
    !<LA: though this could cause problems with newer users so 
    !<LA: for the new mode this option will not be added. 
      ! if (old_mode) then
      if (old_mode) call check_inputs
      ! call new_input_reader

!
!     --- SETUP AND/OR PROCESS SYMBOL FILE ---
!
      !<LA: will add symbol to a checkpoint type file
      !<LA: keep intact for now 
      INQUIRE(FILE='SYMBOL',EXIST=EXIST)
      IF (.NOT.EXIST) THEN
        IF(FRAGMENT1) THEN
          WRITE(6,*)'FRAGMENT CALCULATION REQUESTED'
          CALL ISETUP_FRAG
        ELSE
          CALL ISETUP_STD
        ENDIF
      ENDIF
      INQUIRE(FILE='SYMBOL',EXIST=EXIST)
      IF (.NOT.EXIST) GOTO 900 
      CALL SYMBOL(NCALC,MODE_RUN,IMESH,IERR)
!
!     --- FAIL IF CALCULATION INDEX WAS NOT FOUND IN SYMBOL ---
!
      IF (IERR.NE.0) THEN
        WRITE(6,*)'THE DIRECTIONS FOR CALC INDEX ',NCALC,' AS DEFINED'
        WRITE(6,*)'IN FILE RUNS HAVE NOT BEEN FOUND IN FILE SYMBOL'
        GOTO 900
      END IF
!
!     --- READ AND WRITE SCFDAT ---
!
!     --- LB: MAXSCF AND SCFTOL NOW USED FROM MODULE  ---
!     --- GLOBAL_INPUTS THROUGH NRLMOL_INPUT.DAT FILE ---
!     --- PLACE HERE A CALL TO CECK_INPUTS TO GET VALUES OF ---
!     --- MAXSCF AND SCFTOL
!
    !<LA: 
      if (old_mode) call check_inputs
      IF (MODE_RUN.EQ.3) SCFTOL= 1.0D-8
!
!     --- DELETE SOME FILES ---
!
      IF ((ITBEG.EQ.0).AND.(ISTSCF.NE.2)) THEN
        OPEN(99,FILE='POTOLD',FORM='UNFORMATTED',STATUS='UNKNOWN')
        CLOSE(99,STATUS='DELETE')
      END IF
      IF ((NCALC.EQ.1).AND.(ITBEG.EQ.0)) THEN
        OPEN(99,FILE='VERLET',FORM='FORMATTED',STATUS='UNKNOWN')
        CLOSE(99,STATUS='DELETE')
        OPEN(99,FILE='CGRAD',FORM='FORMATTED',STATUS='UNKNOWN')
        CLOSE(99,STATUS='DELETE')
        OPEN(99,FILE='HAMAVG',FORM='UNFORMATTED',STATUS='UNKNOWN')
        CLOSE(99,STATUS='DELETE')
      END IF
!
!     --- SETUP SOME STUFF ---
!
      ETOTAL=0.0D0
      ENNUC=0.0D0
      ELOCAL=0.0D0
      ERGFLD=0.0D0
      EKINONL=0.0D0
      ENONLO=0.0D0
      ERGXL=0.0D0
      ERGXN=0.0D0
      ERGCL=0.0D0
      ERGCN=0.0D0
      ESOLTOT=0.0D0
      ESOLC=0.0D0
      ENUCSOL=0.0D0
      FULLSTEP=.TRUE.
      IF (MAXSCF.EQ.0) THEN
        FULLSTEP=.FALSE.
        MAXSCF=1
      END IF
      MAXSCF=IABS(MAXSCF)
!
!     --- OPEN FILE OUTPUT, INITIALIZE SYMMETRY, AND READ ---
!     --- ATOMIC/BASIS SET DATA ---
!
      OPEN(7,FILE='OUTPUT',FORM='FORMATTED',STATUS='UNKNOWN')
      REWIND(7)
      !<LA: GRPMAT is read in here 
      CALL FGMAT
      CALL CREPMAT
      !<LA: question here
      CALL READINP
!
!     --- MPI: SEND SYMMETRY ATOMIC/BASIS SET DATA TO WORKERS
!
%ifdef MPI
      CALL SENDDATA(101)
%endif
!
!     --- TEST FOR LINEAR DEPENDENCIES AND SYMMETRIZE BASIS ---
!
      CALL TESTBAS
!
!     --- GENERATE MESH ---
!
! not currently used will be revisted later
      FOMSH_ENABLE=.FALSE.
      IF(FOMSH_ENABLE) THEN
        ALLOCATE(FOMSH_INFO(MXSPN,MAX_OCC))
        CALL FODONMSHGEN(ITBEG,NCALC,IMESH,FOMSH_INFO)
      END IF

      ! Original mesh code continues
      !<LA: Alan says dvpmesh should not be used 
      IF (IMESH .EQ. 1) THEN
        CALL VMESH(ITBEG,NCALC)
      ELSE
        CALL DVPMESH(ITBEG,NCALC)
      ENDIF
      WRITE(*,*) 'NMSH is ', NMSH
      CALL FLUSH(6)
      IF(MESH_SAV) CALL SYSTEM('mkdir SCRATCH')
!YY where is the best place to allocate coulomb and rhog in sic?
!     IF(LSIC) call allocate_sic(.true.) 
      call allocate_sic(.true.)
%ifdef GROUP
      CALL TRACER('CALLING GLOBAL_CALL(64)')
      CALL GLOBAL_CALL(64)
%endif
      CALL ALLOCATE_SIC_SHM
!
!     --- INITIALIZATION ---
!
      EXCCONV=.FALSE.
      HAVEHAM=.FALSE.
      ITTOT=MAX(ITBEG,0)
      OLDERG1=0.0D0
      OLDERG2=0.0D0
      ITSCF=0
!
!     --- BEGIN SCF ITERATION LOOP. GET ENERGY AND NEW WAVEFUNCTIONS ---
!     --- LEAVE LOOP IF (.NOT.FULLSTEP) ---
!
 400  CONTINUE
      CALL GTTIME(TIMEA)
      MAXSCF=MAX(MAXSCF,100)
      ITSCF=ITSCF+1
      
!PB changed
      IF(FOD_LOOP) THEN ! read new FOD positions
       call symfrm(1)
       OPEN(68,FILE='FRMORB')
       READ(68,*)LFRM
       DO LSPN=1,2
        DO IFRM=1,LFRM(LSPN)
         READ(68,*)(BFRM(J,IFRM,LSPN),J=1,3)
        END DO
       END DO
       CLOSE(68)
      ELSE
       CONVERGENCE=.FALSE.
      END IF

      TRACE=0.0D0
      TOTQNUM=0.0D0
      ITTOT=ITTOT+1
      PRINT '(A)',   ' '
      PRINT '(A,I3)','ITERATION ',ITTOT
      PRINT '(A)',   '============='
!
!     --- NEW CODE TO READ WF FROM SPIN UNPOLARIZED CALCULATION ---
!     --- INTO A SPIN POLARIZED CALCULATION ---
!
      if (old_mode) call check_inputs
      SELECT CASE (ISTSCF)
      CASE (4)
        IF (LSIC) THEN
         CALL READWFSIC(FAILED,LSIC)
         GO TO 111
        ELSE
         CALL READWF(FAILED)

         IF (FAILED) THEN
          ISTSCF=3
          CALL NEWWAVES(ITTOT,TRACE)
         END IF
         GO TO 111
        END IF
      CASE(5)
        IF(FRAGMENT1)THEN
          CALL READWF_FRAG(FAILED)
          IF (FAILED) THEN
            ISTSCF=3
            CALL NEWWAVES(ITTOT,TRACE)
          END IF
          GO TO 111
        ELSE
          WRITE(6,*)'MAIN:ERROR, TRYING TO READ
     &          WAVEFUNCTIONS NOT IN FRAMENT MODE'
          CALL STOPIT
        ENDIF
      CASE (11:13)
        CALL READWF2(FAILED)
        IF(FAILED) THEN
          WRITE(6,*)'ERROR:COULD NOT CREATE SPIN POL FROM SPIN UNPOL'
          CALL STOPIT
        ENDIF
        ISTSCF=4
        GO TO 111
      END SELECT

      IF(.NOT.FOD_LOOP) CALL NEWWAVES(ITTOT,TRACE)

  111 CONTINUE
      WRITE(7,1010)TRACE
      PRINT 1010,TRACE
      IF (.NOT.FULLSTEP) GOTO 410

      IF(DMAT1)THEN
%ifdef SCALAPACK
        CALL DENMAT_MPI
%else
        CALL TRACER('CALLING DENMAT_SERIAL')
        CALL DENMAT_SERIAL
%endif
      ENDIF
!
!      PERFORM DENSITY MATRIX MIXING
!
      IF(MIXING1==1)THEN
        IF(.NOT.DMAT1) THEN
          WRITE(6,*)'ERROR:DENSITY MATRIX MIXING CAN ONLY BE USED'
          WRITE(6,*)'WHEN USING DMATV=''Y'' IN INPUT FILE'
          CALL STOPIT
        ENDIF
        CALL DMATMIX
      ENDIF
!
!     --- CHECK ENERGY FOR CONVERGENCE                      ---
!     --- LB SCFTOL NOW SHARED THROUGH GLOBAL_INPUTS MODULE ---
!
!YY For borth DFT and SIC calculation, check scf convergence
      IF(FROZENDENSITY1) THEN
       CONVERGENCE =.TRUE. !SKIP SCF
      ELSE IF(.NOT.FOD_LOOP) THEN
       CALL CHKSCF(ERGCNV,MODE_RUN,OLDERG1,OLDERG2,ITSCF)
      END IF

      IF(EXCITED1)CONVERGENCE=EXCCONV

      IF(NONSCF1.AND.NONSCFFORCES1) CONVERGENCE=.TRUE.
!
!     --- GET NEXT POTENTIAL, ENERGY ---
!
!##############################################
!##             LSIC                         ##
!##############################################
       IF(LSIC)THEN
         CALL GTTIME(TIMET1)
         NSPX=NSPN
%ifdef GROUP
         CALL GLOBAL_CALL(67)
%else
! LB: INITIALIZE DEBDAX ARRAY
!        WRITE(6,*)'NSPN',NSPN,SIZE(SIC,3)
!>LA: should probably write this like this 
         sic(:,:,:) = 0.0d0
         debdax(:,:,:) = 0.0d0
         results(:,:,:) = 0.0d0

!         DO I=1,NSPN
!          DO J=1,MAX_OCC
!           DO K=1,MAX_OCC
!             SIC(K,J,I)=0.0D0
!           END DO
!          END DO
!          DO IORB=1,MAX_OCC
!           DO J=1,3
!             DEBDAX(J,IORB,I)=0.0d0
!           END DO
!          END DO
!         END DO
!
!         DO JSPNX=1,NSPX
!          DO IORBX=1,MAX_OCC
!           DO I=1,13
!            RESULTS(I,IORBX,JSPNX)=0.0d0
!           END DO
!          END DO
!         END DO
%endif

!         DO 555 JSPNX=1,NSPX   !Spin loop
         DO JSPNX=1,NSPX   !Spin loop
           PRINT *, " CALLING FRMORB2(0,0)"
           CALL FRMORB2(0,0)
           PRINT *, " CALLING FRMIORB(1,1)"
           CALL FRMIORB(1,1)
           PRINT *, " FINISHED FRMIORB(1,1)"
!          IF(JSPNX.EQ.2)CALL FIXTMAT(1)
%ifdef GROUP
!          CALL TRACER('GOING TO GLOBAL CALL 66')
           CALL GTTIME(TIMEX)
           CALL GLOBAL_CALL(66,JSPNX)
           CALL GTTIME(TIMEY)
           CALL TIMOUT('SIC ORBITAL LOOP',TIMEY-TIMEX)
%else
           DO IORBX=1,NFRM(JSPNX) !NWFS(JSPNX)
             !PRINT*,IORBX,NFRM(JSPNX)
             CALL GTTIME(THTIME)
             !PRINT*,(BFRM(J,IORBX,JSPNX),J=1,3)
             IF (FOMSH_ENABLE) THEN
               CALL READMESH(JSPNX, IORBX,
     &               BFRM(1:3,IORBX,JSPNX),   ! position of FO
     &               FOMSH_INFO(JSPNX,IORBX)) ! distance to nearest
               CALL APOTNL_SIC(TOTQNUM,JSPNX,IORBX)
               ! restore ordinary DFT mesh
               CALL READMESH(0,0, ! <-- use to load orig msh
     &               BFRM(1:3,IORBX,JSPNX),
     &               FOMSH_INFO(JSPNX,IORBX))
             ELSE
               CALL APOTNL_SIC(TOTQNUM,JSPNX,IORBX)
             END IF

             CALL GTTIME(THTIME2)
             WRITE(6,*)'MAIN TIME FOR SIC LOOP:',IORBX,THTIME2-THTIME

           END DO
%endif
! Moved SIC matrix initialization here -> Reverted.
!          SIC(:,:,JSPNX)=0.0D0
! Construct SIC matrix
           CALL GTTIME(TIMET3)
           IF(NFRM(JSPNX) > 0) THEN !Skip if orbital is zero
            CALL SICLAGM(JSPNX)
           END IF
           CALL GTTIME(TIMET4)
           WRITE(6,*)'TIME FOR SICLAGM:',TIMET4-TIMET3

! Calculate FOD force - moved from apotnl_sic
           IF(FOD_LOOP.OR.CONVERGENCE) THEN
            CALL GTTIME(TIMET3)
            IF(CALCTYPE1.NE.2) THEN
%ifdef ATOMFORCE
             WRITE(6,*) 'CALLING SICLAG_DER FOR SPIN',JSPNX
             CALL SICLAG_DER(JSPNX)
%else
             WRITE(6,*) 'SKIPPING SICLAG_DER FOR FLO'
             WRITE(6,*) 'RECOMPILE WITH ATOMFORCE TO USE THE FEATURE'
%endif
            END IF
            CALL FRMORB2(-JSPNX,-1)

            CALL GTTIME(TIMET4)
            WRITE(6,*)'TIME FOR FOD FORCES:',TIMET4-TIMET3             
           END IF


! UPDATE FORCES AND SCISSOR MATRICES....
! LB: call data collection in MPI version
           IRES=(/1,2,4,6,9,10,11,12,13/)
           DO IORBX=1,NFRM(JSPNX)
             WRITE(6,801)(RESULTS(IRES(I),IORBX,JSPNX),I=1,9)
           END DO

! UPDATE SCISSOR:
!          CALL UPDATESCISSOR(JSPNX)

           IF(JSPNX.EQ.1)OPEN(39,FILE='fforce.dat1')
           IF(JSPNX.EQ.2)OPEN(39,FILE='fforce.dat2')
           rewind(39)
           write(6,*)'Writing fforce.dat'
           DO IORBX=1,NFRM(JSPNX)
             write(39,39)(DEBDAX(IX,IORBX,JSPNX),IX=1,3)
!            write( 6,39)(DEBDAX(IX,IORBX,JSPNX),IX=1,3)
           END DO
           close(39)
         enddo
! 555     CONTINUE
! LB: WRITE SIC MATRIX
        !<LA: Does this need to be written to a separate file? 
         OPEN(77,FILE='SICD.DAT',form='formatted')
         do LSPN=1,NSPN
          do IWF=1,NFRM(LSPN)
           WRITE(77, 1001)(SIC(JWF,IWF,LSPN),JWF=1,NFRM(LSPN))
          enddo
         enddo
 1001  FORMAT(' ',15F12.5)
         CLOSE(77)

         call system('cat fforce.dat1 > fforce.dat')
         call system('rm  fforce.dat1')
         inquire(file='fforce.dat2',exist=exist)
         if(exist)call system('cat fforce.dat2 >> fforce.dat')
         if(exist)call system('rm  fforce.dat2')
         inquire(file='fforce.out',exist=exist)
         if(exist)call system('rm fforce.out')
         inquire(file='fforce.prt',exist=exist)
         if(exist)call system('rm fforce.prt')
         WRITE(6,*)'WRITTEN RESULTS'
         ZSIC=0.0D0
         !<LA: Redundant to write to a new file if we don't have to 
         !<LA: commenting out 
!         OPEN(76,FILE='SIC_ENERGY',FORM='FORMATTED',STATUS='UNKNOWN')
!         WRITE(76,*)'FLO    Charge     Asymp      E_COUL     E_SIC',
!     &'      EXlocal    EClocal    EXnonl     ECnonl'
         WRITE(6,*)'FLO    Charge     Asymp      E_COUL     E_SIC',
     &'      EXlocal    EClocal    EXnonl     ECnonl'
         DO JSPNX=1,NSPX
           DO IORBX=1,NFRM(JSPNX)
!             WRITE(76,802)(RESULTS(IRES(I), IORBX,JSPNX),I=1,9)
             WRITE(6, 802)(RESULTS(IRES(I), IORBX,JSPNX),I=1,9)
             ZSIC=ZSIC+RESULTS(9,IORBX,JSPNX)
           END DO
         END DO
!         CLOSE(76)
         WRITE(6,*)'MAIN : ZSIC =', ZSIC
 810     FORMAT(         40F12.6)
 811     FORMAT(         20F12.6)

         CALL GTTIME(TIMET2)
         TIME_MAINSIC=TIME_MAINSIC+TIMET2-TIMET1
         WRITE(6,*)'MAIN TIME FOR SIC :',TIME_MAINSIC
       END IF
!#####################################################
!##           END IF LSIC                           ##
!##           DFT/SIC common section                ##
!#####################################################
!YY Either use our apotnl + call_forces or use apotnl_dft (useful in comparing energy).
!     CALL APOTNL(TOTQNUM,ITTOT)
      CALL APOTNL_DFT(TOTQNUM)
      CALL GTENRGY

      WRITE(7,'(A,F19.8)') 'TOTAL ENERGY: ',ETOTAL
800   FORMAT('SIC COR (U,D,A,X,C,XOSIC,DLAM,DENG,TOT):',15F11.4)
801   FORMAT(' ORBITAL SIC:',15F11.6)
802   FORMAT(F4.0,20F11.6)
39    FORMAT(' ',3F20.12)
! Calculate forces or do Potential Mixing, depending on convergence
!YY call_forces goes with apotnl (UTEP version) and not apotnl_dft (based on
!'PERFECT')
!     IF(.not. LSIC) THEN
!       CALL CALL_FORCES
!     ENDIF
!
!     --- OUTPUT TO SUMMARY ---
!
      OPEN(54,FILE='SUMMARY',FORM='FORMATTED',STATUS='UNKNOWN',
     %     ACCESS='APPEND')
      IF (ITSCF.EQ.1) WRITE(54,1020)
      WRITE(54,1030)ITTOT,TRACE,ETOTAL,EKINONL,TOTQNUM
     &  ,ETOTAL+ZSIC,MIN(ETOTAL+ZSIC,ELOWEST) !OLDERG1
      ETOTAL=ETOTAL+ZSIC
      ELOWEST=MIN(ETOTAL,ELOWEST)
      CLOSE(54)
!
!     --- WAVEFUNCTION DECOMPOSITION INTO LOCAL CONTRIBUTIONS ---
!
      IF(ATOMSPH1)CALL ATOMSPH(ITTOT)
!
!     --- FINISHED ---
!
!     WRITE(6,*)'ISPN = ', ISPN
      ISTSCF=2
!
!     --- GO BACK TO THE NEXT CYCLE IF ENERGY DID NOT CONVERGE ---
!
! LB
! Check to see if this is a non SCF run
      CALL GTTIME(TIMEB)
      WRITE(6,*)'TIME FOR ITERATION:',TIMEB-TIMEA
 
      if (old_mode) call check_inputs
      IF(NONSCF1) THEN
        CONVERGENCE=.TRUE.
        GOTO 410
      ENDIF

      IF(.NOT. FROZENDENSITY1) THEN
!YY Print out WFOUT every 10 iteration for restarting calculations.
       IF (NWFOUT > 0) then
        IF (mod(ITSCF,NWFOUT).eq.0) THEN
         CALL WFOUT
!        CALL SYSTEM('mv WFOUT WFOUT.IC')
        END IF
       END IF
      END IF
!###########################
!#   FOD Optimization      #
!###########################
      IF(FOD_LOOP) then
        iter_fod = iter_fod + 1
        PRINT *, "ELECTRO >> ELECTRONIC_GEOMETRY"
        CALL FOD_OPT(ETOTAL,FOD_CONVERGE)
        !CALL ELECTRONIC_GEOMETRY(ETOTAL)
        print *, 'FOD_CONVERGE', FOD_CONVERGE
        PRINT *, "SUCCESS >> ELECTRONIC_GEOMETRY"
      END IF

      IF (ITSCF.LT.MAXSCF.AND..NOT.CONVERGENCE) GOTO 400
!
!     --- CONVERGENCE ACHIVEVED OR MAX CYCLES - NOW PRINT RESULTS ---
!
  410 CONTINUE
      CALL GTTIME(TIME2)
      TTIME=TIME2-TIME1

      IF(FOD_LOOP1) THEN
       IF(LSIC) FOD_LOOP = .TRUE.
       ! set max fod optimization steps here 
       !<LA:  200 should be a variable
       IF (FOD_LOOP.AND..NOT.FOD_CONVERGE.AND.ITER_FOD.lt.200) GOTO 400   
      END IF

!
!     --- PRINT DETAILED SUMMARY OF ENERGIES ---
!
      ETOTAL=ETOTAL+EDISP
      PRINT 1200, ' '
      PRINT 1200, 'SUMMARY OF ENERGY CONTRIBUTIONS:'
      PRINT 1200, '================================'
      PRINT 1200, 'TOTAL ENERGY:               ',ETOTAL
      IF(SOLVENT1) THEN
        PRINT 1200,'TOTAL ENERGY WITH SOLVENTS: ',ESOLTOT +ETOTAL
        PRINT 1200,'SOLVENT-ELECTRON COULOMB:   ',ESOLC
        PRINT 1200,'SOLVENT-NUCLEAR COULOMB:    ',ENUCSOL
        PRINT 1200,'SOLVENT-SOLVENT COULOMB:    ',ESOLTOT
      ENDIF
      PRINT 1200, 'NUCLEAR REPULSION:          ',ENNUC
      PRINT 1200, 'LOCAL POTENTIAL:            ',ELOCAL
      PRINT 1200, 'MEAN-FIELD COULOMB:         ',ECOUL 
      IF (CONVERGENCE) THEN
        PRINT 1200,'NONLOCAL POTENTIAL:         ',ENONLO
        PRINT 1200,'KINETIC:                    ',EKINONL-ENONLO
      ELSE
        PRINT 1200,'KINETIC+NONLOCAL POTENTIAL: ',EKINONL
      END IF
      PRINT 1200, 'LOCAL EXCHANGE:             ',ERGXL 
      PRINT 1200, 'LOCAL CORRELATION:          ',ERGCL 
      PRINT 1200, 'NONLOCAL EXCHANGE:          ',ERGXN 
      PRINT 1200, 'NONLOCAL CORRELATION:       ',ERGCN 
      PRINT 1200, 'EXTERNAL ELECTRIC FIELD:    ',ERGFLD
      IF(PCM1)THEN
        PRINT 1200, 'PCM POLARIZATION ENERGY:    ',EPCM
      ENDIF
      IF(DFTD31) THEN
        PRINT 1200, 'DISPERSION ENERGY:          ',EDISP
      ENDIF
      PRINT 1200, ' '
 1200 FORMAT(A,F20.6)
!
!     --- FIRST LET US CLEAN UP THE DISK A BIT ... ---
!
      IF (CONVERGENCE) THEN
!       CALL KINETIC
!
        OPEN(99,FILE='KBROY1' ,FORM='UNFORMATTED',STATUS='UNKNOWN')
        CLOSE(99,STATUS='DELETE')
        OPEN(99,FILE='KBROY2' ,FORM='UNFORMATTED',STATUS='UNKNOWN')
        CLOSE(99,STATUS='DELETE')
        OPEN(99,FILE='COULOM3',FORM='UNFORMATTED',STATUS='UNKNOWN')
        CLOSE(99,STATUS='DELETE')
        OPEN(99,FILE='HAMBST' ,FORM='UNFORMATTED',STATUS='UNKNOWN')
        CLOSE(99,STATUS='DELETE')
        OPEN(99,FILE='OVLPTST',FORM='FORMATTED',STATUS='UNKNOWN')
        CLOSE(99,STATUS='DELETE')
        OPEN(99,FILE='FRMLV'  ,FORM='FORMATTED',STATUS='UNKNOWN')
        CLOSE(99,STATUS='DELETE')
        !<LA: why is this done twice? Commented out. 
!        OPEN(99,FILE='FRMLV'  ,FORM='FORMATTED',STATUS='UNKNOWN')
!        CLOSE(99,STATUS='DELETE')
        OPEN(99,FILE='BROYDEN',FORM='FORMATTED',STATUS='UNKNOWN')
        CLOSE(99,STATUS='DELETE')

        !<LA: New additions, to reduce file clutter
!        open(99,file='HAMBABY', form='unformatted', status='unknown')
!        close(99,status='delete')
!        open(99,file='OVLBABY', form='unformatted', status='unknown')
!        close(99,status='delete')
!        open(99,file='KINBABY', form='unformatted', status='unknown')
!        close(99,status='delete')


!
!   --- WRITE FORCE DATA, DIPOLE AND EFIELD TO FRCOUT, WRITE VIBINP ---
!
        IF (CALCTYPE1 .EQ. 2) THEN
         PRINT*,"SCF-ONLY CALCULATION: NO NEED TO WRITE FRCOUT"
         PRINT*,""
        ELSE
         CALL WRITEFRC(NCALC)
        END IF
      END IF
!################################
!##     END IF   CONVERGENCE   ##
!################################
!
!     --- OPEN HISTORY. CALL UPDATE FOR GEOMETRY MINIMIZATION  ---
!
!<LA: this could be written to screen to reduce file clutter 
      OPEN(33,FILE='HISTORY',FORM='FORMATTED',STATUS='UNKNOWN',
     %     ACCESS='APPEND')

      WRITE(33,*) ' 1000 ****** N E W   D A T A   S E T ******'
      IF (CONVERGENCE) THEN
        IF(CALCTYPE1.NE.2) CALL UPDATE(NCALC,MODE_RUN)
        WRITE(33,*)' CONVERGENCE REACHED TOLERANCE:',SCFTOL
      ELSE
        WRITE(33,*)' NO CONVERGENCE, TOLERANCE:',SCFTOL
      END IF
      WRITE(33,1100)TRACE,ETOTAL,EKINONL
!
!     --- TRANSFER OF ATOM PARAMETERS TO HISTORY ---
!
      NN_ATOMS=NIDENT
      WRITE(33,*) NN_ATOMS,' NUMBER OF IDENTITY MEMBERS'
      DO IA=1,NN_ATOMS
        CALL GASITES(1,RIDT(1,IA),MXNUC,RLOCA,MSITES)
        WRITE(33,*) MXNUC,' NUMBER OF IDENTICAL ATOMS, POSITION:'
        WRITE(33,1110)(RIDT(J,IA),J=1,3),
     &                ZELC(IFUIDT(IA)),ZNUC(IFUIDT(IA))
      enddo
      WRITE(33,*) '-1000 ****** E N D   D A T A   S E T ******'
      CLOSE(33)
!
!     --- WRITE/UPDATE MOLDEN OUTPUT FILE ---
!
!      IF (MOLDEN.NE.'JMOL') CALL MOLDENDRV("OPT")

!
!     --- APPEND WAVE FUNCTIONS TO INPUT IF SMALL CALCULATION ---
!
    !<LA: why do this only if ttime < 600 ? readinp will break if input isn't written
      IF (TTIME .LT. 600) THEN
        OPEN(99,FILE='INPUT',FORM='FORMATTED',STATUS='OLD',
     %          ACCESS='APPEND')
     
        WRITE(99,1120) NSPN,'SPIN'
        WRITE(99,1120) NWF,'NUMBER OF OCCUPIED ORBITALS, EVALUES:'
        WRITE(99,1130)(EVLOCC(IWF), IWF=1,NWF)
        ITOT=0
        WRITE(99,1120)N_REP,'NUMBER OF REPRESENTATIONS'
        DO ISPN=1,NSPN
          DO I_REP=1,N_REP
            WRITE(99,1140) N_OCC(I_REP,ISPN),NS_TOT(I_REP)
            WRITE(99,1130)(OCCUPANCY(I_OCC+ITOT),
     &                     I_OCC=1,N_OCC(I_REP,ISPN))
            ITOT=ITOT+N_OCC(I_REP,ISPN)
            DO IWF=1,N_OCC(I_REP,ISPN)
              WRITE(99,*)' '
              WRITE(99,1130)(PSI_COEF(I,IWF,I_REP,ISPN),
     &                       I=1,NS_TOT(I_REP))
            enddo 
          enddo 
        enddo
        CLOSE(99)
      END IF
!
!     --- WRITE WAVEFUNCTIONS TO UNFORMATTED FILE ---
!
      IF(.NOT. FROZENDENSITY1) THEN
       CALL WFOUT
      END IF   !NOT write WFOUT in the frozen density mode.
!     CALL WFOUT2
!###########################
!#   FOD Optimization      #
!###########################
!>YY CALL ELECTRONIC_GEOMETRY to compute forces on FODs.
!>   Use CGRAD to update new positions for FODs.
      IF(.NOT.FOD_LOOP1) THEN
       PRINT *, "ELECTRO >> ELECTRONIC_GEOMETRY"
       IF(LSICF) then
        !IF(SCALEDLBFGS1) THEN
        !<LA: this calls fod_opt regardless of statement ask if this should be simplified
        IF(FOD_OPT2) THEN
          CALL FOD_OPT(ETOTAL,FOD_CONVERGE)
!         CALL SCALEDLBFGS(ETOTAL)
        ELSE
!         CALL ELECTRONIC_GEOMETRY(ETOTAL)
          CALL FOD_OPT(ETOTAL,FOD_CONVERGE)
        END IF
       END IF
       PRINT *, "SUCCESS >> ELECTRONIC_GEOMETRY"
      END IF
      IF(LSICF) THEN
        CALL DEALLOCATE_SIC_SHM
        call allocate_sic(.false.)
        call allocate_diag1(.false.)
      END IF
      IF(FOMSH_ENABLE) DEALLOCATE(FOMSH_INFO)
!
!     --- FIGURE OUT IF WE SHOULD DO ALL THE ANALYSIS STUFF     ---
!     --- THIS WILL ONLY HAPPEN IF WE HAVE A CONVERGED GEOMETRY ---
!
      IF (OPTIMIZED) DOITALL=.FALSE.
!
!     --- CREATE EMPTY INPUT FILES UNLESS THEY ALREADY EXIST ---
!
      IF (DOITALL) THEN
        DO I=1,4
          IF (I .EQ. 1) THEN
            NAME='DOSOCCU'
          ELSE IF (I .EQ. 2) THEN
            NAME='ATOMSPH'
          ELSE IF (I .EQ. 3) THEN
            NAME='DOSVIRT'
          ELSE
            NAME='DOSJNT'
          END IF

          INQUIRE(FILE=NAME,EXIST=EXIST)
          IF (.NOT. EXIST) THEN
            OPEN(65,FILE=NAME,FORM='FORMATTED',STATUS='NEW')
            REWIND(65)
            WRITE(65,*) ' '
            CLOSE(65)
          END IF
        END DO
      END IF

      if (old_mode) call check_inputs

      if (old_mode) call check_inputs
      IF(DOSJNT1) CALL DOSJNT

      IF(POPULATION1) THEN
       CALL write_population(1) !Mulliken Population
       CALL write_population(2) !Lowdin Population
      END IF

!
!     --- WAVEFUNCTION DECOMPOSITION INTO LOCAL CONTRIBUTIONS    ---
!     --- APPROXIMATE ATOMIC CHARGES AND DENSITY/POTENTIAL GRIDS ---
!     --- THIS WILL DESTROY POTENTIAL AND MESH ARRAYS ---
!
!<LA: What is going on here with these routines?
!%ifndef MPI
!     CALL QDIPOLE
!     CALL DIR
!     CALL EFG
!     CALL HYPERF(0)
      IF(ATOMSPH1) CALL ATOMSPH(0)
!     CALL POTRHOGRD
!%else
      WRITE(6,*)'**COMPILE WITHOUT DMPI FOR POTRHOGRD'
!%endif

      if (old_mode) call check_inputs
      !< 
      IF(RHOGRID1) CALL RHOGRID

      if (old_mode) call check_inputs
      IF(WFGRID1) CALL WFGRID
!YY Write out Fermi orbitals if WFGRID1 is on.
      if (old_mode) call check_inputs
      IF(LSICF .AND. WFFRM1) CALL WFFRM

!     --- WAVEFUNCTION DENSITY GRID, ANGULAR DECOMPOSITION OF  ---
!     --- WAVEFUNCTIONS FOR EACH CENTER, AND JOINT DENSITY OF  ---
!     --- STATES THE STORED HAMILTONIAN MATRIX MUST BE PRESENT ---
!     --- TO SOLVE THESE TASKS SINCE IT IS USED TO FIND THE    ---
!     --- EIGENVALUES AND EIGENFUNCTIONS ---
!
      if (old_mode) call check_inputs
      LNEWWF=.FALSE.
      IF(DOSOCCU1) CALL CALLDECOMP(LNEWWF,'DOSOCCU')
      LNEWWF=.FALSE.
      IF(DOSOCCU1) CALL CALLDECOMP(LNEWWF,'DOSVIRT')

      LNEWWF=.TRUE.
      IF(DOSOCCU1) CALL CALLDECOMP(LNEWWF,'DOSOCCU')
      LNEWWF=.TRUE.
      IF(DOSOCCU1) CALL CALLDECOMP(LNEWWF,'DOSVIRT')

!
!     --- NOW WRITE BASIS SETS AND MOS INTO MOLDEN FILE ---
!
      if (old_mode) call check_inputs
      !>LA: this doesn't do anything
!      IF(MOLDEN1)THEN
!        IF ((MOLDEN.EQ.'FULL').OR.(MOLDEN.EQ.'JMOL')) THEN
!        END IF
!      ENDIF
!
!     --- CALCULATE DENSITY MATRIX ---
!
!<LA: what is going on here?
      IF(NBO1)THEN
        IF(NGRP>1)THEN
          WRITE(6,*) 'NBO INTEFRACE NOT AVAILABLE FOR'
          WRITE(6,*) 'SYMMETRIC SYSTEMS'
        ELSE
!         IF (PRTMOS.OR.PRTPMAT.OR.NBO) CALL BLDPMAT
!
!     --- PRINT OVERLAP MATRIX AND WRITE NBO ANALYSIS INPUT FILE ---
!
          !IF (PRTSMAT.OR.NBO) CALL NBODRV
        ENDIF
      ENDIF

!
!     --- UPDATE RUNS ---
!     --- REREAD IN CASE CHANGES HAVE BEEN MADE ---
!
      OPEN(65,FILE='RUNS',FORM='FORMATTED',STATUS='UNKNOWN')
      REWIND(65)
      READ(65,*) ITBEG,NCALC
      READ(65,*) ISTSCF,ISTDEF
      READ(65,*) IHIPOL
      REWIND(65)
      IHIPOL=0
      ITBEG=ITTOT
      IF (CONVERGENCE) THEN
        ITBEG=0
        ISTSCF=ISTDEF
        if (old_mode) call check_inputs
        IF(CALCTYPE1.NE.2) NCALC=NCALC+1
      ELSE
        IF (FULLSTEP) THEN
          ISTSCF=2
        ELSE
          ITBEG= -1
          MAXSCF=0
        END IF
      END IF
      WRITE(65,'(2(1X,I5),12X,A)') ITBEG,NCALC,'ITBEG, NCALC'
      WRITE(65,'(2(1X,I5),12X,A)') ISTSCF, ISTDEF,
     & 'START: 0=SCR.NUC, 1=HAM, 2=POT, 3=LSF, 4=WFUNC, 5=WFUNC_FRAG'
      WRITE(65,'(1X,I5,18X,A)') IHIPOL,
     &          'START HAMILTONIAN IS INTERPOLATED: 0=NO, 1=YES'
      CLOSE(65)
      !<LA should create a small subroutine here to place this in
      !< so it the goto can be removed
  900 CONTINUE
!
!     --- AFTERMATH ---
!
      CLOSE(7)
      CALL GTTIME(TIME2)
      PRINT '(A)',' '
      CALL TIMOUT('EXECUTION OF UNRAVEL (PART 1):     ',T1UNRV)
      CALL TIMOUT('EXECUTION OF UNRAVEL (PART 2):     ',T2UNRV)
      CALL TIMOUT('EXECUTION OF THIS NEAT PROGRAM:    ',TIME2-TIME1)
      PRINT '(A)','HOPE TO SEE YOU AGAIN VERY SOON :-)' 
!
!     --- THAT IS THE END, FOLKS ---
!     --- REMOVE RUNNING ---

!     --- FORMAT STUFF ---
!
 1010 FORMAT('TRACE OF HAMILTONIAN: ',F18.6)
 1020 FORMAT(2X,'IT',10X,'TRACE',16X,'ETOT',17X,
     &       'EKIN+ENONLOC',10X,'CHARGE',14X,'EDFT+SIC',13X,' LOWEST')
 1030 FORMAT(1X,I3,6(1X,F20.9))
 1100 FORMAT(3(1X,F20.8),' TR, EN, KN')
 1110 FORMAT(3(1X,F15.6),3X,2(1X,F8.3),' R, ZELC, ZNUC')
 1120 FORMAT(1X,I5,5X,A)
 1130 FORMAT(3(G20.12))
 1140 FORMAT(3(1X,I5),5X,A)
!
%ifdef MPI
      RETURN
!
%endif
!     ------------------------------------------------------------------
!
      END
